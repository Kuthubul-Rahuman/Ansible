---
#
# Save initial state
#
- name: Retrieve a list of gpg keys are installed for package checking
  shell: 'rpm -q gpg-pubkey | sort'
  register: list_of_pubkeys

- name: Retrieve the gpg keys used to verify packages
  command: 'rpm -q --qf %{description} gpg-pubkey'
  register: pubkeys

- name: Save gpg keys to a file
  copy:
    content: "{{ pubkeys['stdout'] }}\n"
    dest: '{{ remote_tmp_dir }}/pubkeys'
    mode: 0600

#
# Tests start
#
- name: download EPEL GPG key
  get_url:
    url: https://ci-files.testing.ansible.com/test/integration/targets/rpm_key/RPM-GPG-KEY-EPEL-7
    dest: /tmp/RPM-GPG-KEY-EPEL-7

- name: download sl rpm
  get_url:
    url: https://ci-files.testing.ansible.com/test/integration/targets/rpm_key/sl-5.02-1.el7.x86_64.rpm
    dest: /tmp/sl.rpm

- name: remove EPEL GPG key from keyring
  rpm_key:
    state: absent
    key: /tmp/RPM-GPG-KEY-EPEL-7

- name: check GPG signature of sl. Should fail
  shell: "rpm --checksig /tmp/sl.rpm"
  register: sl_check
  ignore_errors: yes

- name: confirm that signature check failed
  assert:
    that:
      - "'MISSING KEYS' in sl_check.stdout or 'SIGNATURES NOT OK' in sl_check.stdout"
      - "sl_check.failed"

- name: remove EPEL GPG key from keyring (idempotent)
  rpm_key:
    state: absent
    key: /tmp/RPM-GPG-KEY-EPEL-7
  register: idempotent_test

- name: check idempotence
  assert:
    that: "not idempotent_test.changed"

- name: add EPEL GPG key to key ring
  rpm_key:
    state: present
    key: /tmp/RPM-GPG-KEY-EPEL-7

- name: add EPEL GPG key to key ring (idempotent)
  rpm_key:
    state: present
    key: /tmp/RPM-GPG-KEY-EPEL-7
  register: key_idempotence

- name: verify idempotence
  assert:
    that: "not key_idempotence.changed"

- name: check GPG signature of sl. Should return okay
  shell: "rpm --checksig /tmp/sl.rpm"
  register: sl_check

- name: confirm that signature check succeeded
  assert:
    that: "'rsa sha1 (md5) pgp md5 OK' in sl_check.stdout or 'digests signatures OK' in sl_check.stdout"

- name: remove GPG key from url
  rpm_key:
    state: absent
    key: https://ci-files.testing.ansible.com/test/integration/targets/rpm_key/RPM-GPG-KEY-EPEL-7

- name: Confirm key is missing
  shell: "rpm --checksig /tmp/sl.rpm"
  register: sl_check
  ignore_errors: yes

- name: confirm that signature check failed
  assert:
    that:
      - "'MISSING KEYS' in sl_check.stdout or 'SIGNATURES NOT OK' in sl_check.stdout"
      - "sl_check.failed"

- name: add GPG key from url
  rpm_key:
    state: present
    key: https://ci-files.testing.ansible.com/test/integration/targets/rpm_key/RPM-GPG-KEY-EPEL-7

- name: check GPG signature of sl. Should return okay
  shell: "rpm --checksig /tmp/sl.rpm"
  register: sl_check

- name: confirm that signature check succeeded
  assert:
    that: "'rsa sha1 (md5) pgp md5 OK' in sl_check.stdout or 'digests signatures OK' in sl_check.stdout"

- name: remove all keys from key ring
  shell: "rpm -q  gpg-pubkey | xargs rpm -e"

- name: add very first key on system
  rpm_key:
    state: present
    key: https://ci-files.testing.ansible.com/test/integration/targets/rpm_key/RPM-GPG-KEY-EPEL-7

- name: check GPG signature of sl. Should return okay
  shell: "rpm --checksig /tmp/sl.rpm"
  register: sl_check

- name: confirm that signature check succeeded
  assert:
    that: "'rsa sha1 (md5) pgp md5 OK' in sl_check.stdout or 'digests signatures OK' in sl_check.stdout"

- name: get keyid
  shell: "rpm -q gpg-pubkey | head -n 1 | xargs rpm -q --qf %{version}"
  register: key_id

- name: remove GPG key using keyid
  rpm_key:
    state: absent
    key: "{{ key_id.stdout }}"
  register: remove_keyid
  failed_when: remove_keyid.changed == false

- name: remove GPG key using keyid (idempotent)
  rpm_key:
    state: absent
    key: "{{ key_id.stdout }}"
  register: key_id_idempotence

- name: verify idempotent (key_id)
  assert:
    that: "not key_id_idempotence.changed"

- name: add very first key on system again
  rpm_key:
    state: present
    key: https://ci-files.testing.ansible.com/test/integration/targets/rpm_key/RPM-GPG-KEY-EPEL-7

- name: Issue 20325 - Verify fingerprint of key, invalid fingerprint - EXPECTED FAILURE
  rpm_key:
    key: https://ci-files.testing.ansible.com/test/integration/targets/rpm_key/RPM-GPG-KEY.dag
    fingerprint: 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111
  register: result
  failed_when: result is success

- name: Issue 20325 - Assert Verify fingerprint of key, invalid fingerprint
  assert:
    that:
       - result is success
       - result is not changed
       - "'does not match the key fingerprint' in result.msg"

- name: Issue 20325 - Verify fingerprint of key, valid fingerprint
  rpm_key:
    key: https://ci-files.testing.ansible.com/test/integration/targets/rpm_key/RPM-GPG-KEY.dag
    fingerprint: EBC6 E12C 62B1 C734 026B 2122 A20E 5214 6B8D 79E6
  register: result

- name: Issue 20325 - Assert Verify fingerprint of key, valid fingerprint
  assert:
    that:
      - result is success
      - result is changed

- name: Issue 20325 - Verify fingerprint of key, valid fingerprint - Idempotent check
  rpm_key:
    key: https://ci-files.testing.ansible.com/test/integration/targets/rpm_key/RPM-GPG-KEY.dag
    fingerprint: EBC6 E12C 62B1 C734 026B 2122 A20E 5214 6B8D 79E6
  register: result

- name: Issue 20325 - Assert Verify fingerprint of key, valid fingerprint - Idempotent check
  assert:
    that:
      - result is success
      - result is not changed

- name: add GPG key from string value
  rpm_key:
      state: present
      key: "-----BEGIN PGP PUBLIC KEY BLOCK-----\n\nmQGNBGUhLi4BDACrXw5kkEdclg7edHjzs3dCs4GIn7ct/tkyhi0Sw5cmH8txujPi\nHC5oVy+89sC7c3MapoVJPQFWJEf1/gIXWVnFdskKo+6G9/oy8VjFb763Wd+LAZpZ\neGnH/Aah/4v1jMI/Cwh020zDDbU3TU048IuPKTVYxyLjN52H9FWRRBY+XlZuSFFn\nvVeT8kL7c90onY2I+VXlI1vxQZ3Jnf2IUFqMmVQShVbikCf2nalYn1oz58qX0G0y\nfAffH6QfAKuaJPdB9IO/ZNMJDt7n/pjojNeMJ2iNXr1nWvmOBgBbqH0hsCB+gemG\naEbkXImZKB5+AYOOiKUKCmxL3iXUPJN96/Zi2govW8bOcv5iceFJIZr9WkdYghs8\nu180tVKVHhktRRrWXapJKsMf7+eG8uycNUSRlNVJDoxLmG2fm0CjBIqz+33t/p1d\nhOg6uoI6aa9xDTCeCbQHwFoi0PBMP19369TR9CuwwLNItUGMEll0KbG4PFAS3UJN\nMyvNv2LSSHebc90AEQEAAbQvaW5mYW1lLWlvIChTYW5kd2ljaCkgPGxhdXJvLmJh\nbGRlcmFzQGdtYWlsLmNvbT6JAc4EEwEKADgWIQQusEcInILarrO0h2D+rE4ds7ha\n3wUCZSEuLgIbAwULCQgHAgYVCgkICwIEFgIDAQIeAQIXgAAKCRD+rE4ds7ha39Zv\nC/96WC9zcrqKgiwWl1Tpw8y0tlOKfTQFzo82/tDPOApZuWlTSugGH+wKS3dLXBgb\nb78j7otzJBOGOiAp26ciZFcSe7FI59p0fKlGrXEj2hD5VkaK5ieFKo4/Rhalp9xK\nwg0nBgq2EWDuGgwPer+L9Qk1TZkeykv5lHNva2areo5Rnrpc0u/zE88xuWWomsn6\nomiJ7GlhyxxMAnyIrxRlCtY4b3b4TKDqz91R+VvXUN8Riel67HNIpc0TiW2eBDc4\nto145XGKZsrMKjmlDgyoRKIImeir4IgoXQHvz/v+uQKfbvJO0jgAT4Zh2tdNnSvf\nAzQL3lUOh7RBFONib+tObbBKILTH18Sa23tjctK09cRi4D8SxE2lcVeUxo6H8J/T\nHQSppNodmsuTaPRQOBscdQWAE3eSs5gEr9M+ALSkdPHCyktrJerqFUbkmcFR7q/Z\n9lWu8Ij/3LulXE5zgv3bFnSZlbf1FFWlRUx7QlCPNjFhTEJnmW78vhcDgsPZdird\nToi5AY0EZSEuLgEMAJj4jnYQCgd8e+mqgE+cspKi5GORBBZaClTsFqoCqkb5r9qJ\nCIwupyzcxkDRMRubgONVBgPwY5iimHXldqlNqw3bhrHsbwTvyxZ5Rqd03MxKOx2z\nHdp8pS5nIHCPdix+dBFJuhAOi6KG5zKwEQpNoohTwsc/9wQeYL37C/E4KClnD2My\nFEKX8NzLyFatBSuaF/BdqbpNyKW1Zv9QoMibcaUR9iehBD//uN9RGalLg4r7q8/B\nfDnN8fXNPdoYj20vu5jeHwf38F1tZcjQCqlz2JXcGC05ZzTk0JmKab/PWwnYnP1+\nKdJxpfj0eNw80OgwKbtxSElwqQr+UEcATquQMw+wtJO5KNK2NtA3w8+odigUtkiB\nlqLBwe8CzhHjjb1y5sQiSrTFHYuU4EiRAacfPR0sIvafMP9nCc9hL2c1XH4bkHOC\nKuZaaYWLRzun5Drz4qB+DvOjK8+5CkpCTIXV/mE/ix6SmziQ6I8+RZjXRxQeJK4L\nWZPkv9nh1F2pWe2M7QARAQABiQG2BBgBCgAgFiEELrBHCJyC2q6ztIdg/qxOHbO4\nWt8FAmUhLi4CGwwACgkQ/qxOHbO4Wt9iaQv/V0hgahG5hEf+3zn8ImLAYH3xK46E\nJokQzvfafGdVZ2SMyvb7zImEV5L6xqTira/d+lW74GZPxFFwlGOLtkr58riE3sdg\nL5EBvASep4kaz1GqoHpalAdR9yZDrHxyZExhDpUjBEd8oiBe/sPAEQlQQWqEPanE\nHsGS84lcN6onPhZE4fTUHTE76+Ayl9xqHktznaowws9Ml6LvVGRFSuIn44poUqBf\nFKOfPgHzy3Gy/NNEH6XFN4vxbC6OOJIuEVOjVHYyPD/kNF6kfeySlhDoDqJD45LS\ndptLRD91j73C7Asu2bQN0q7Mvr/g0MyNQ1n5B+bbNnmcI6F1VV9zI/bBRGYdOxCx\n5QRXY0otSVau5mddLCX4I7F/yrBvRfffWdi92wyByKvO2aGTtnRcajuFdeTQWanG\nlB9JQFBdsV+40/51ADc30F/UReP23833skictHMY9XDXYslgUOsbzYTMqHDuuDE/\n6cy9+l5zdaTzJ+biexvyK7dhXXhyueXWaDF9\n=NXmg\n-----END PGP PUBLIC KEY BLOCK-----"
  register: result

- name: Assert Verify GPG key successfully added from string value
  assert:
    that:
      - result is success
      - result is changed

#
# Cleanup
#
- name: remove all keys from key ring
  shell: "rpm -q  gpg-pubkey | xargs rpm -e"

- name: Restore the gpg keys normally installed on the system
  command: 'rpm --import {{ remote_tmp_dir }}/pubkeys'

- name: Retrieve a list of gpg keys are installed for package checking
  shell: 'rpm -q gpg-pubkey | sort'
  register: new_list_of_pubkeys

- name: Confirm that we've restored all the pubkeys
  assert:
    that:
      - 'list_of_pubkeys["stdout"] == new_list_of_pubkeys["stdout"]'
